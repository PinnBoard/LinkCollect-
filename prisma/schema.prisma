generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DBURL")
}

model User {
  id               String             @id @default(cuid()) @map("_id")
  name             String
  email            String             @unique
  username         String             @unique
  profilePic       String?
  bio              String?
  password         String?
  isPremium        Boolean            @default(false)
  isPublic         Boolean            @default(true)
  emailToken       String?
  verified         Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  socials          String[]           @default([])
  collections      Collection[]       @relation("CreatedCollections")
  savedCollections Collection[]       @relation("SavedCollections")
  CollectionUpvote CollectionUpvote[]

  // @@unique([email, username]) -> two people can't have both email and username same...
}

model Collection {
  id                String             @id @default(cuid()) @map("_id")
  userId            String
  user              User               @relation("CreatedCollections", fields: [userId], references: [id], onDelete: Cascade)
  savedCollectionId String?
  SavedBy           User?              @relation("SavedCollections", fields: [savedCollectionId], references: [id], onDelete: Cascade)
  title             String             @unique
  image             String?
  description       String?
  isPublic          Boolean            @default(false)
  tags              String[]           @default([])
  views             Int?
  timelines         Bookmarks[]
  upvotes           CollectionUpvote[]
  pinDetails        PinDetails?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// model CollectionMapping {
//   id           String  @id @default(cuid()) @map("_id")
//   collectionId String  @unique
//   isDeleted    Boolean @default(false)
// }

model Bookmarks {
  id           String      @id @default(cuid()) @map("_id")
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  title        String?
  link         String
  note         String?
  favicon      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  PinDetails   PinDetails?
}

model CollectionUpvote {
  id           String     @id @default(cuid()) @map("_id")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  createdAt    DateTime   @default(now())

   @@unique([userId, collectionId]) // Add a unique constraint to prevent multiple upvotes from the same user on the same collection

}

model PinDetails {
  id           String      @id @default(cuid()) @map("_id")
  isPinned     Boolean     @default(false)
  updatedAt    DateTime    @default(now()) @updatedAt
  collectionId String?     @unique
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  bookmarkId   String?     @unique
  bookmark     Bookmarks?  @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
}



// enum Role {
//   FreemiumUser
//   PremiumUser
//   SuperUser
//   Admin 
// } 
